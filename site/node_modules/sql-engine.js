var util = require('util');
var tool = require('leaptool');

/**
 * There is differences in various relational databases
 * For example:
 *   MySQL uses DATETIME for date/time field
 *   PostGreSQL uses TIMESTAMP for date/time field
 */
Engine = function(config) {
    this.dbtype = config && config.dbtype || 'mysql';  // values: mysql | pgsql
}

/**
 * Escape to use in SQL
 * Borrowed from node-mysql client code
 */
Engine.prototype.escape = function(val) {
    if (val === undefined || val === null) {
        return 'NULL';
    }
    
    switch (typeof val) {
        case 'boolean': return (val) ? 'true' : 'false';
        case 'number': return val + '';
    }

    if (typeof val === 'object') {
        val = (typeof val.toISOString === 'function')
          ? val.toISOString()
          : val.toString();
    }
    
    val = val.replace(/[\0\n\r\b\t\\\x1a]/g, function(s) {
        switch(s) {
            case "\0": return "\\0";
            case "\n": return "\\n";
            case "\r": return "\\r";
            case "\b": return "\\b";
            case "\t": return "\\t";
            case "\x1a": return "\\Z";
            default: return "\\"+s;
        }
    });
    return val;
};

/**
 *
 * field model example:
 * {
 *    type: 'text',
 *    subtype: { type: 'text' },
 *    optional: true
 * }
 */
Engine.prototype.getSqlField = function(field, fieldModel) {
    var sqlType = '';
    switch(fieldModel.type) {
        case 'string':
            sqlType = 'VARCHAR(100)'
            break;
        case 'number':
            sqlType = 'INT';
            break;
        case 'text':
            sqlType = 'TEXT';
            break;
        case 'date':
            if (this.dbtype == 'mysql') {
                sqlType = 'DATETIME';
            } else if (this.dbtype == 'pgsql') {
                sqlType = 'TIMESTAMP';
            }
            break;
        case 'file':
            sqlType = 'TEXT';
            break;
        case 'array':
            sqlType = 'TEXT';
            break;
        case 'object':
            sqlType = 'TEXT';
            break;
        default:
            util.puts('WARN unknown type in toSqlField. type=' + fieldModel.type);
    }
    var result = '';
    if (sqlType) {
        result = util.format('"%s" %s', field, sqlType);
    }
    return result;
};

Engine.prototype.toSqlValue = function(field, doc, model) {
    var result = '';
    var value = doc[field];
    var fieldModel = model[field];
    // _id and _class fields are special since they are not in the model
    // _id field is automatic in mongodb so it is not in the model
    if (field === '_id') {
        fieldModel = { type: '_id' };
    }
    if (field === '_class') {
        fieldModel = { type: 'string' };
    }
    // _class field is special
    var subtype = (fieldModel.subtype && fieldModel.subtype.type) || '';
    switch(fieldModel.type) {
        case 'string':
            result = util.format("'%s'", this.escape(value));
            break;
        case 'text':
            result = util.format("'%s'", this.escape(value));
            break;
        case 'number':
            result = util.format('%s', this.escape(value));
            break;
        case 'date':
            result = 'null';
            if (value) {
                value = new Date(value);
                if (this.dbtype == 'mysql') {
                    result = util.format("'%s-%s-%s %s-%s-%s'",
                        value.getFullYear(), value.getMonth()+1, value.getDate(),
                        value.getHours(), value.getMinutes(), value.getSeconds()
                    );
                } else if (this.dbtype == 'pgsql') {
                    result = util.format(
                        "to_timestamp('%s/%s/%s %s:%s:%s', 'YYYY/MM/DD HH24:MI:SS')",
                        value.getFullYear(), value.getMonth()+1, value.getDate(),
                        value.getHours(), value.getMinutes(), value.getSeconds()
                    );
                }
            }
            
            break;
        case 'file':
            result = util.format("'%s'", tool.base64.encodeObject(value));
            break;
        case 'array':
            result = this.arrayToSqlValue(value, subtype);
            break;
        case 'object':
            result = this.objectToSqlValue(value, subtype);
            break;
        case '_id':
            result = value;
            break;
        default:
            util.puts('WARN unknown type in toSqlValue. type=' + fieldModel.type);
    }
    return result;
};

Engine.prototype.arrayToSqlValue = function(value, subtype) {
    var result = '';
    if (subtype == 'string') {
        // for string array, use JSON.stringify so result is searchable in sql
        value = JSON.stringify(value);
        result = util.format("'%s'", this.escape(value));
    } else {
        result = util.format("'%s'", tool.base64.encodeObject(value));
    }
    return result;
};

Engine.prototype.objectToSqlValue = function(value, subtype) {
    var result = '';
    if (!value) {
        result = '"null"';
    }
    if (subtype == 'json') {
        result = util.format("'%s'", tool.base64.encodeObject(value));
    } else if (subtype == 'mixed') {
        result = util.format("'%s'", tool.base64.encode(value));
    } else {
        result = util.format("'%s'", tool.base64.encode(value));
    }
    return result;
};

Engine.prototype.fromSqlValue = function(value, fieldModel) {
    var result = '';
    fieldModel = fieldModel || {};
    var subtype = fieldModel.subtype && fieldModel.subtype.type || '';
    try {
        switch(fieldModel.type) {
        case 'string':
            result = value ? util.format('%s', value) : '';
            break;
        case 'number':
            result = value ? value : 0;
            break;
        case 'text':
            result = value ? util.format('%s', value) : '';
            break;
        case 'date':
            result = value ? new Date(value) : '';
            break;
        case 'file':
            result = value ? tool.base64.decodeObject(value) : null;
            break;
        case 'array':
            result = this.arrayFromSqlValue(value, subtype);
            break;
        case 'object':
            result = this.objectFromSqlValue(value, subtype);
            break;
        default:
            util.puts('fromSqlValue: ' + value + ', type unknown: ' + fieldModel.type);
            result = value;
        }
    } catch (e) {
        util.puts('error in fromSqlValue: ' + e);
        console.log('value: ', value);
        console.log('fieldModel: ', fieldModel);
    }
    return result;
};

Engine.prototype.arrayFromSqlValue = function(value, subtype) {
    var result = '';
    if (subtype == 'string') {
        result = value ? JSON.parse(value) : null;
    } else {
        result = value ? tool.base64.decodeObject(value) : null;
    }
    return result;
};

Engine.prototype.objectFromSqlValue = function(value, subtype) {
    var result = '';
    if (!value) {
        result = null;
    }
    if (subtype == 'json') {
        result = value ? tool.base64.decodeObject(value) : null;
    } else if (subtype == 'json') {
        result = value ? tool.base64.decode(value) : null;
    } else {
        result = value ? tool.base64.decode(value) : null;
    }
    return result;
};

//drop table if exists sample;
Engine.prototype.getDropStatement = function(tableName, model) {
    return util.format('drop table if exists "%s";', tableName);
};

//create table mytable (id INT, data VARCHAR(100));
Engine.prototype.getCreateStatement = function(tableName, model) {
    var fieldValues = [];
    // add _id as primary key column
    var idColumnDef = '';
    if (this.dbtype == 'mysql') {
        idColumnDef = '"_id" INT NOT NULL AUTO_INCREMENT';
    } else if (this.dbtype == 'pgsql') {
        idColumnDef = '"_id" SERIAL NOT NULL';
    }
    fieldValues.push(idColumnDef);
    // add _class column
    fieldValues.push('"_class" VARCHAR(32)');
    for (var property in model) {
        var fieldValue = this.getSqlField(property, model[property]);
        if (fieldValue) {
            fieldValues.push(fieldValue);
        }
    }
    fieldValues.push('PRIMARY KEY("_id")');
    var values = fieldValues.join(', ');
    return util.format('create table "%s" ( %s );', tableName, values);
};

/**
 * Get select statement
 *
 * condition supported:
 *   { 'name': 'john' }
 *   { '$or': [{ username: 'ret' }] }
 *
 * filter supported:
 *   'skip': 5 // skip and limit need to present together
 *   'limit':10 
 *   'sort': 'age'  //sort by age in ascending order
 *   'sort': {age:1}  //sort by age in ascending order
 *   'sort': {name:1, age:-1} //sort by name ascending, then age descending
 *   'sort': [['age', 1]] //old sort condition in mongodb
 * 
 * condition example: {'age': {'$gt':10, '$lte':30}, 'name': /^J/}
 * filter example: {'skip': 5, 'limit':10, sort: {age:1}}
 *
 * MYSQL: SELECT * FROM tbl LIMIT 5,10;  # Retrieve rows 6-15
 */
Engine.prototype.getSelectStatement = function(tableName, condition, filter, model) {
    
    /*
    SELECT syntax from MySQL doc
    http://dev.mysql.com/doc/refman/5.0/en/select.html
    
    SELECT
    [ALL | DISTINCT | DISTINCTROW ]
      [HIGH_PRIORITY]
      [STRAIGHT_JOIN]
      [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
      [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
    select_expr [, select_expr ...]
    [FROM table_references
    [WHERE where_condition]
    [GROUP BY {col_name | expr | position}
      [ASC | DESC], ... [WITH ROLLUP]]
    [HAVING where_condition]
    [ORDER BY {col_name | expr | position}
      [ASC | DESC], ...]
    [LIMIT {[offset,] row_count | row_count OFFSET offset}]
    [PROCEDURE procedure_name(argument_list)]
    [INTO OUTFILE 'file_name' export_options
      | INTO DUMPFILE 'file_name'
      | INTO var_name [, var_name]]
    [FOR UPDATE | LOCK IN SHARE MODE]]
    */
    
    var query = util.format('select * from "%s" ', tableName);
    if (condition) {
        query += 'where 1=1 '
        for (var p in condition) {
            if (/^\$/.test(p)) {
                if (p == '$or') {
                    // '$or' = [{ username: 'ret' }]
                    var outerlist = []
                    for (var i in condition[p]) {
                        var item = condition[p][i];
                        var list = []
                        for (var property in item) {
                            list.push(property + "='" + item[property] + "'");
                        }
                        outerlist.push('(' + list.join(' and ') + ')');
                    }
                    if (outerlist.length == 1) {
                        query += 'and ' + outerlist[0] + ' ';
                    } else {
                        query += 'and (' + outerlist.join(' or ') + ') ';
                    }
                } else {
                    util.puts('Unknown query condition ' + p);
                }
            } else {
                query += util.format("and %s = '%s' ", p, condition[p]);
            }
        }
    }
    if (filter) {
        var sortObject = {};
        if (filter.sort) {
            // 'sort': {name:1, age:-1}
            if (filter.sort.constructor === String) {
                sortObject[filter.sort] = 1;
            } else if (filter.sort.constructor === Object) {
                sortObject = filter.sort;
            } else {
                util.puts('Unknown sort data:' + filter.sort);
                console.log(filter.sort);
            }
        }
        var sortEntries = [];
        // for sort, store valid sort items in sortEntries
        for (var field in sortObject) {
            // make sure field is in the model
            if (model[field]) {
                var sortDirection = sortObject[field] == 1 ? 'ASC' : 'DESC';
                sortEntries.push(util.format('%s %s', field, sortDirection));
            }
        }
        if (sortEntries.length > 0) {
            // [ORDER BY {col_name | expr | position} [ASC | DESC], ...]
            query += 'ORDER BY ' + sortEntries.join(',') + ' ';
        }
        if (filter.hasOwnProperty('limit')) {
            if (!filter.hasOwnProperty('skip')) {
                filter['skip'] = 0;  // default skip to 0
            }
            // [LIMIT {[offset,] row_count | row_count OFFSET offset}]
            if (this.dbtype == 'mysql') {
                query += util.format('LIMIT %s, %s ', filter.skip, filter.limit);
            } else if (this.dbtype == 'pgsql') {
                query += util.format('LIMIT %s OFFSET %s ', filter.limit, filter.skip);
            }
            
        }
    }
    return query;
}

//insert into mytable (id, data) values (101, 'row data 1');
Engine.prototype.getAddStatement = function(tableName, model, doc) {
    var columns = [];
    var values = [];
    for (var p in doc) {
        if (doc[p]) {
            columns.push(util.format('"%s"', p));
            values.push(this.toSqlValue(p, doc, model));
        }
    }
    var result = util.format(
        'insert into "%s" (%s) values (%s);',
        tableName, columns.join(', '), values.join(', ')
    );
    return result;
};

//update sample set name='abc', tags='ddd' where name = 'xyz';
Engine.prototype.getUpdateStatement = function(tableName, model, doc, condition) {
    var values = [];
    for (var p in doc) {
        // auto field can be updated 
        if (p != '_id' && p!= '_class') {
            values.push(
                util.format('"%s"=%s', p, this.toSqlValue(p, doc, model))
            );
        }
    }
    var result = util.format(
        'update "%s" set %s where %s;',
        tableName, values.join(', '), condition
    );
    return result;
};

//delete from mytable where id = 101;
Engine.prototype.getDeleteStatement = function(tableName, model, condition) {
    var result = util.format('delete from "%s"', tableName);
    if (condition) {
        result += ' where ' + condition;
    }
    result += ';';
    return result;
};


exports.Engine = Engine;