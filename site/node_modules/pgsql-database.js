var util = require('util');
var pg = require('pg');
var tool = require('leaptool');
var sqlEngine = new (require('sql-engine').Engine)({dbtype: 'pgsql'});

/*
setup admin user postgres
=========================
$ sudo su postgres -c psql template1
# ALTER USER postgres WITH PASSWORD 'leapon';
# \q
$ sudo su postgres -c passwd

create table using pgadmin3
=========================
$ sudo apt-get install pgadmin3

*/
Database = function(app, callback) {
    this.app = app;
    var host = this.app.db_host;
    var port = this.app.db_port;
    this.dbname = this.app.db_name || 'devdb';
    
    var connString = util.format("tcp://%s:%s@%s/%s",
        this.app.db_username, this.app.db_password,
        this.app.db_host, this.dbname);
    this.db = new pg.Client(connString);
    this.db.connect();
    this.db.query("SELECT NOW() as when", function(error, result) {
        if (!error) {
            callback && callback(); // continue executing program
        } else {
            util.puts('Database error: ' + error);
            util.puts("\nCan't connect to pgSqlDB @" + connString);
        }
    });
};

/**
insert
========================================
result:
{ affectedRows: 1,
  insertId: 7,
  serverStatus: 2,
  warningCount: 0,
  message: '',
  setMaxListeners: [Function],
  emit: [Function],
  addListener: [Function],
  on: [Function],
  once: [Function],
  removeListener: [Function],
  removeAllListeners: [Function],
  listeners: [Function]
}
info:
{ dbsuccess: true, fields: undefined }

select
==========================================
result:
[ { _id: 1,
    name: 'asdfs',
    tags: 'gdfg',
    create_date: null,
    create_by: 'admin',
    edit_date: null,
    edit_by: null }
]
info:
{ _id: 
   { length: 53,
     received: 53,
     number: 2,
     type: 4,
     catalog: 'def',
     db: 'appbase_devdb',
     table: 'sample',
     originalTable: 'sample',
     name: '_id',
     originalName: '_id',
     charsetNumber: 63,
     fieldLength: 12,
     fieldType: 3,
     flags: 16899,
     decimals: 0 },
  name: 
   { length: 55,
     received: 55,
     ...
    }...
]
*/

/**
 * Run DML statement
 */
Database.prototype.execute = function(type, table, statement, callback) {
    this.app.debug('pgsqlDatabase::execute\n' + statement);
    this.db.query(statement, function (error, result, info) {
        info = {
            command: result && result.command,
            rowCount: result && result.rowCount
        };
        callback(error, result, info);
    });   
};

/**
 * Run DDL statement
 *
 * @param {String} table Valid for single table select, null otherwise
 * @param {String} query Query including select, insert, delete, update etc
 * @param {Function} callback Callback function (error, docs, info)
 */
Database.prototype.query = function(table, condition, filter, callback) {
    //for select statement, need to get total count and stored in info.total
    var model = this.app.module[table].model;
    var query = sqlEngine.getSelectStatement(table, condition, null, model);
    this.app.debug('db query: ' + query);
    this.queryCount(table, query, function(error, docs, info){
        if (error) {
            console.log('query error:' + error.message);
            console.log('query:' + query);
        }
        var totalCount = docs && docs[0] && docs[0].count || 0;
        this.runQuery(table, condition, filter, {total: totalCount}, callback);
    }.bind(this));
};

// select count(*) count from (SELECT * FROM `sample` WHERE 1) q
Database.prototype.queryCount = function(table, query, callback) {
    query = util.format('select count(*) count from (%s) q', query);
    this.db.query(query, function (error, result) {
        var docs = result.rows;
        callback(error, docs, result);
    });
};

/**
 * run query on database table
 *
 * condition example: {'age': {'$gt':10, '$lte':30}, 'name': /^J/}
 * filter example: {'skip': 5, 'limit':10, sort: [['age', 1]]}
 */
Database.prototype.runQuery = function(table, condition, filter, metadata, callback) {
    var model = this.app.module[table].model;
    var query = sqlEngine.getSelectStatement(table, condition, filter, model);
    this.app.debug('db query: ' + query);
    this.db.query(query, function (error, result, info) {
        if (error) {
            console.log('query error:' + error.message);
            console.log('query:' + query);
        }
        var docs = [];
        result = result.rows;
        var model = this.app.module[table].model;
        for (var i in result) {
            var doc = {};
            for (var p in result[i]) {
                if (p == '_id') {
                    doc[p] = result[i][p];
                } else if (p == '_class') {
                    doc[p] = result[i][p];
                } else {
                    doc[p] = sqlEngine.fromSqlValue(result[i][p], model[p]);
                }
            }
            docs.push(doc);
        }
        info = {
            module: table || '',
            total: metadata.total || 0
        };
        callback(error, docs, info);
    }.bind(this));
};

Database.prototype.find = function(table, condition, filter, callback) {
    this.app.debug('db find - table:' + table);
    this.query(table, condition, filter, function(error, results, info) {
        callback(error, results || [], info);
    });
};

Database.prototype.findOne = function(table, condition, callback) {
    this.app.debug('db findOne - table:' + table);
    var filter = null;
    this.query(table, condition, filter, function(error, results, info) {
        callback(error, results[0] || null, info);
    });
};

Database.prototype.findById = function(table, id, callback) {
    this.app.debug('db findById - table:' + table);
    var condition = { _id: id };
    this.findOne(table, condition, function(error, doc) {
        if (doc == null) {
            error = new Error('Can not find ' + table + ' id=' + id);
        }
        var info = {success: !error};
        callback(error, doc, info);
    });
};

Database.prototype.findByIds = function(table, ids, callback) {
    this.app.debug('db findById - table:' + table);
    var idList  = [];
    for (var index in ids) {
        idList.push({ _id: ids[index]});
    }
    var condition = { $or: idList};
    var filter = null;
    this.find(table, condition, filter, function(error, docs) {
        if (docs == null) {
            error = new Error('Can not finds ' + table + ' ids=' + ids);
        }
        var info = {success: !error};
        callback(error, docs, info);
    });
};

Database.prototype.createTables = function(callback) {
    var nameTrack  = {};
    for (var name in this.app.module) {
        if (this.app.module[name].model) {
            nameTrack[name] = false;
        }
    }
    var createTablesNext = function(name) {
        nameTrack[name] = true;
        if (tool.allTrue(nameTrack)) {
            callback();
        }
    }.bind(this);
    for (var name in nameTrack) {
        this.createTable(name, this.app.module[name].model, createTablesNext);
    }
};

/*
 app.module.page.model
{
 name: { type: 'string', optional: false },
 title: { type: 'string', optional: true },
 description:
  { type: 'text',
    subtype: { type: 'text' },
    optional: true },
 type:
  { type: 'string',
    optional: false,
    values: [ [Object], [Object] ] }
 ...
}
*/
Database.prototype.createTable = function(table, model, callback) {
    this.app.info('Create table: ' + table);
    var dropStatement = sqlEngine.getDropStatement(table, model);
    var createStatement = sqlEngine.getCreateStatement(table, model);
    var dropQuery = this.db.query(dropStatement);
    dropQuery.on('end', function() {
        var createQuery = this.db.query(createStatement);
        createQuery.on('end', function() {
            callback && callback(table);
        });
    }.bind(this));
};

Database.prototype.add = function(table, docs, callback) {
    this.app.debug('db add - table:' + table);
    // if docs is null or empty array, call callback and exit
    if (!docs || (docs.constructor === Array &&docs.length === 0)) {
        callback(null, [], {});
        return;
    }
    if (docs.constructor != Array) {
        docs = [docs];
    }
    var addStatement = '';
    var statements = {};
    var model = this.app.module[table].model;
    for (var i = 0; i < docs.length; i++) {
        docs[i]._class = table;
        addStatement = sqlEngine.getAddStatement(table, model, docs[i]);
        statements[addStatement] = false;
    }
    
    var allResults = [];
    var dbAddNext = function(errr, results, info, statement) {
        for (var i in results) {
            allResults.push(results[i]);
        }
        statements[statement] = true;
        if (tool.allTrue(statements)) {
            callback(null, allResults, info);
        }
    };
    for (var statement in statements) {
        this.doInsert(table, statement, dbAddNext);
    }
};

/**
 * Run insert statement
 *
 * private method
 */
Database.prototype.doInsert = function(table, statement, callback) {
    this.execute('insert', table, statement, function(error, result, info) {
        if (error) {
            this.app.error('Error in pgsqlDatabase::add ' + table + '\n' + error);
        }
        var results = [];
        if (result && result.affectedRows == 1) {
            results.push({_id: result.insertId});
        }
        callback(error, results, info, statement);
    }.bind(this));
    
};

Database.prototype.updateById = function(table, id, object, callback) {
    this.app.debug(util.format('db updateById - table:%s, id:%s', table, id));
    var condition = '_id=' + id;
    var model = this.app.module[table].model;
    var statement = sqlEngine.getUpdateStatement(table, model, object, condition);
    this.app.debug('update statement:\n' + statement);
    this.execute('update', table, statement, function(error, result, info) {
        callback(error, result, info);
    });
};

Database.prototype.deleteById= function(table, id, callback) {
    this.app.debug(util.format('db deleteById - table: %s, id=%s', table, id));
    if (id) {
        var model = this.app.module[table].model;
        var condition = '_id=' + id;
        var statement = sqlEngine.getDeleteStatement(table, model, condition);
        this.app.debug('delete statement:\n' + statement);
        this.execute('delete', table, statement, function(error, result, info) {
            callback(error, result, info);
        });
    } else {
        callback(null, [], {});
    }
};

Database.prototype.deleteBy= function(table, condition, callback) {
    this.app.debug(util.format('db deleteBy - table: %s, condition=%s', table, condition));
    if (condition) {
        var model = this.app.module[table].model;
        var statement = sqlEngine.getDeleteStatement(table, model, condition);
        this.app.debug('delete statement:\n' + statement);
        this.execute('delete', table, statement, function(error, result, info) {
            callback(error, result, info);
        });
    } else {
        callback(null, [], {});
    }
};

Database.prototype.deleteByIds = function(table, ids, callback) {
    this.app.debug(util.format('db deleteById - table: %s, ids=%s', table, ids));
    if (ids === null || ids === []) {
        callback(null, [], {});
    } else {
        var model = this.app.module[table].model;
        var condition = util.format('_id in (%s)', ids.join(','));
        var statement = sqlEngine.getDeleteStatement(table, model, condition);
        this.app.debug('delete statement:\n' + statement);
        this.execute('delete', table, statement, function(error, result, info) {
            callback(error, result, info);
        });
    }
};

Database.prototype.deleteAll = function(table, callback) {
    this.app.debug(util.format('db deleteAll - table:%s', table));
    var model = this.app.module[table].model;
    var condition = '';
    var statement = sqlEngine.getDeleteStatement(table, model, condition);
    this.app.debug('delete statement:\n' + statement);
    this.execute('delete', table, statement, function(error, result, info) {
        callback(error, result, info);
    });
};

// convert id to string format
Database.prototype.getStringId = function(id) {
    return id;
};

module.exports = Database;
